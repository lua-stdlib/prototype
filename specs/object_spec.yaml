before:
  this_module = "std.prototype.object"

  object = require (this_module)
  Object = object.prototype
  obj    = Object {"foo", "bar", baz="quux"}

  function copy (t)
    local r = {}
    for k, v in pairs (t) do r[k] = v end
    return r
  end

specify std.prototype.object:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to="_G", by=this_module}).
          to_equal {}
  - context via the prototype module:
    - it does not perturb the global namespace:
        expect (show_apis {added_to="_G", by="std.prototype"}).to_equal {}

- describe construction:
  - context from Object clone method:
    - it constructs a new object:
        o = Object:clone {}
        expect (o).not_to_be (Object)
        expect (type (o)).to_be "table"
        expect (objtype (o)).to_be "Object"
    - it reuses the Object metatable:
        o = obj:clone {"o"}
        p = o:clone {"p"}
        expect (p).not_to_be (o)
        expect (getmetatable (o)).to_be (getmetatable (p))
    - it sets object fields from arguments:
        expect (obj:clone {}).to_copy (obj)
    - it serves as a prototype for new instances:
        o = obj:clone {}
        expect (objtype (o)).to_be "Object"
        expect (o).to_copy (obj)
        expect (getmetatable (o)).to_be (getmetatable (obj))
    - it separates '_' prefixed fields:
        expect (Object:clone {foo="bar", _baz="quux"}).
          to_equal (Object:clone {foo="bar"})
    - it puts '_' prefixed fields in a new metatable:
        o = Object:clone {foo="bar", _baz="quux"}
        expect (getmetatable (o)).not_to_be (getmetatable (Object))
        expect (getmetatable (o)._baz).to_be "quux"


- describe type:
  - before:
      o = Object {}
      fn = object.type

  - context when called from the object module:
    - it reports the type stored in the object's metatable:
        expect (fn (o)).to_be "Object"
    - it reports the type of a cloned object:
        expect (fn (o {})).to_be "Object"
    - it reports the type of a derived object:
        Example = Object {_type = "Example"}
        expect (fn (Example)).to_be "Example"
    - it reports the type of a cloned derived object:
        Portal = Object {_type = "Demon"}
        p = Portal {}
        expect (fn (p)).to_be "Demon"
        expect (fn (p {})).to_be "Demon"
    - it returns nil for a primitive object:
        expect (fn (nil)).to_be (nil)
        expect (fn (0.0)).to_be (nil)
        expect (fn ('0.0')).to_be (nil)
        expect (fn (function () end)).to_be (nil)
        expect (fn {}).to_be (nil)


- describe instantiation from a prototype:
  - context when _init is nil:
    - before:
        Array = Object {
          _type = "Array",
          "foo", "bar", "baz",
        }
        Array._init = nil

    - it contains user-defined fields:
        expect (copy (Array)).
          to_equal {"foo", "bar", "baz"}
    - it sets array part of instance object from positional parameters:
        array = Array {"first", "second", "third"}
        expect (copy (array)).
          to_equal {"first", "second", "third"}
    - it uses prototype values for missing positional parameters:
        array = Array {"first", "second"}
        expect (copy (array)).
          to_equal {"first", "second", "baz"}
    - it merges surplas positional parameters:
        array = Array {"first", "second", "third", "fourth"}
        expect (copy (array)).
          to_equal {"first", "second", "third", "fourth"}

  - context when _init is an empty table:
    - before:
        Prototype = Object {
          _type = "Prototype";
          _init = {},
          "first", "second", "third",
        }
    - it contains user-defined fields:
        expect (copy (Prototype)).
          to_equal {"first", "second", "third"}
    - it ignores positional parameters: |
        instance = Prototype {"foo", "bar"}
        expect (instance).to_copy (Prototype)

  - context when _init is a table of field names:
    - before:
        Process = Object {
          _type = "Process",
          _init = {"status", "output", "errout"},
          status = -1,
          output = "empty",
          errout = "no errors",
        }
    - it contains user-defined fields:
        expect (copy (Process)).
          to_equal {status = -1, output = "empty", errout = "no errors"}
    - it sets user-defined fields from positional parameters:
        proc = Process {0, "output", "diagnostics"}
        expect (copy (proc)).
          to_equal {status = 0, output = "output", errout = "diagnostics"}
    - it uses prototype values for missing positional parameters:
        proc = Process {0, "output"}
        expect (copy (proc)).
          to_equal {status = 0, output = "output", errout = "no errors"}
    - it discards surplus positional parameters:
        proc = Process {0, "output", "diagnostics", "garbage"}
        expect (copy (proc)).
          to_equal { status = 0, output = "output", errout = "diagnostics" }

  - context when _init is a function:
    - before:
        Prototype = Object {
          _type = "Prototype",
          f1 = "proto1", f2 = "proto2",
          _init = function (self, ...)
                    self.args = unpack {...}
                    self.count = select ("#", ...)
                    return self
                  end,
        }
    - it passes user defined fields to custom _init function:
        instance = Prototype {"param1", "param2"}
        expect ({instance.f1, instance.f2, instance.args}).
          to_equal {"proto1", "proto2", {"param1", "param2"}}
    - it propagates arguments correctly:
        expect (Prototype ().count).to_be (0)
        expect (Prototype ("one").count).to_be (1)
        expect (Prototype ("one", "two").count).to_be (2)
    - it propagates nil arguments correctly:
        expect (Prototype (nil).count).to_be (1)
        expect (Prototype (false, nil).count).to_be (2)
        expect (Prototype (nil, false).count).to_be (2)
        expect (Prototype (nil, nil).count).to_be (2)


- describe field access:
  - before:
      Prototype = Object {
        _type  = "Prototype",
        _init  = { "field", "method"},
        field  = "in prototype",
        method = function (self, ...)
                   return objtype (self) .. " class, " ..
                          table.concat ({...}, ", ")
                 end,
      }
      instance  = Prototype {"in object", function (self, ...)
                                            return objtype (self) .. " instance, " ..
                                                   table.concat ({...}, ", ")
                                          end,
                            }

  - it provides object field access with dot notation:
      expect (instance.field).to_be "in object"
  - it provides class field acces with dot notation:
      expect (Prototype.field).to_be "in prototype"
  - it provides object method acces with colon notation:
      expect (instance:method "object method call").
        to_be "Prototype instance, object method call"
  - it provides class method access with class dot notation:
      expect (Prototype.method (instance, "class method call")).
        to_be "Prototype class, class method call"
  - it allows new instance fields to be added:
      instance.newfield = "new"
      expect (instance.newfield).to_be "new"
  - it allows new instance methods to be added:
      instance.newmethod = function (self)
                             return objtype (self) .. ", new instance method"
                           end
      expect (instance:newmethod ()).to_be "Prototype, new instance method"
  - it allows new class methods to be added:
      Prototype.newmethod = function (self)
                              return objtype (self) .. ", new class method"
                            end
      expect (Prototype.newmethod (instance)).
        to_be "Prototype, new class method"


- describe object method propagation:
  - context with no custom instance methods:
    # :type is a method defined by the root object
    - it inherits prototype object methods:
        instance = Object { type = object.type }
        expect (instance:type ()).to_be "Object"
    - it propagates prototype methods to derived instances:
        Derived = Object { _type = "Derived", type = object.type }
        instance = Derived {}
        expect (instance:type ()).to_be "Derived"
  - context with custom object methods:
    - before:
        bag = Object {
          _type = "bag",
          __index = {
            add   = function (self, item)
                      self[item] = (self[item] or 0) + 1
                      return self
                    end,
            type  = object.type,
          },
        }
    - it inherits prototype object methods:
        expect (bag:type ()).to_be "bag"
    - it propagates prototype methods to derived instances:
        instance = bag {}
        expect (instance:type ()).to_be "bag"
    - it supports method calls:
        expect (bag:add "foo").to_be (bag)
        expect (bag.foo).to_be (1)


# Metatable propagation is an important property of Object cloning,
# because Lua will only call __lt and __le metamethods when both
# arguments share the same metatable - i.e. the previous behaviour
# of making each object its own metatable precluded ever being able
# to use __lt and __le!
- describe object metatable propagation:
  - before: root_mt = getmetatable (Object)

  - context with no custom metamethods:
    - it inherits prototype object metatable:
        instance = Object {}
        expect (getmetatable (instance)).to_be (root_mt)
    - it propagates prototype metatable to derived instances:
        Derived = Object {_type = "Derived"}
        instance = Derived {}
        expect (getmetatable (Derived)).not_to_be (root_mt)
        expect (getmetatable (instance)).to_be (getmetatable (Derived))
  - context with custom metamethods:
    - before:
        bag = Object {
          _type = "bag",
          __lt = function (a, b) return a[1] < b[1] end,
        }
    - it has it's own metatable:
        expect (getmetatable (bag)).not_to_be (root_mt)
    - it propagates prototype metatable to derived instances:
        instance = bag {}
        expect (getmetatable (instance)).to_be (getmetatable (bag))
    - it supports __lt calls: |
        a, b = bag {"a"}, bag {"b"}
        expect (a < b).to_be (true)
        expect (a < a).to_be (false)
        expect (a > b).to_be (false)


- describe __tostring:
  - before:
      o = Object {_type = "Derived", "one", "two", "three"}
  - it returns a string:
      expect (type (tostring (o))).to_be "string"
  - it contains the type:
      expect (tostring (Object {})).to_contain "Object"
      expect (tostring (o)).to_contain (objtype (o))
  - it contains the ordered array part elements:
      expect (tostring (o)).to_contain "one, two, three"
  - it contains the ordered dictionary part elements:
      expect (tostring (Object {one = true, two = true, three = true})).
        to_contain "one=true, three=true, two=true"
      expect (tostring (o {one = true, two = true, three = true})).
        to_contain "one=true, three=true, two=true"
  - it contains a ';' separator only when object has array and dictionary parts:
      expect (tostring (o)).not_to_contain ";"
      expect (tostring (Object {one = true, two = true, three = true})).
        not_to_contain ";"
      expect (tostring (o {one = true, two = true, three = true})).
        to_contain ";"
