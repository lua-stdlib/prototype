before:
  this_module = "std.prototype.container"

  Container = require (this_module).prototype

specify std.prototype.container:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to="_G", by=this_module}).
          to_equal {}
  - context via the prototype module:
    - it does not perturb the global namespace:
        expect (show_apis {added_to="_G", by="std.prototype"}).to_equal {}

- describe construction:
  - context with table _init:
    - it diagnoses missing arguments: |
        if have_typecheck then
          expect (Container ()).
            to_raise "bad argument #1 to 'Container' (table expected, got no value)"
        end
    - it diagnoses too many arguments: |
        if have_typecheck then
          expect (Container ({}, false)).
            to_raise "bad argument #2 to 'Container' (no more than 1 argument expected, got 2)"
        end
  - context with function _init:
    - before:
        Thing = Container { _type = "Thing", _init = function (obj) return obj end }
    - it doesn't diagnose missing arguments:
        expect (Thing ()).not_to_raise "any error"
    - it doesn't diagnose too many args:
        expect (Thing ({}, false)).not_to_raise "any error"

  - context from Container prototype:
    - before:
        things = Container {"foo", "bar", baz="quux"}
    - it constructs a new container:
        expect (things).not_to_be (Container)
        expect (type (things)).to_be "table"
        expect (objtype (things)).to_be "Container"
    - it reuses the container metatable:
        o, p = things {"o"}, things {"p"}
        expect (getmetatable (o)).to_be (getmetatable (p))
    - it sets container fields from arguments:
        o = Container {"foo", "bar", baz="quux"}
        expect (o).to_equal (things)
    - it serves as a prototype for new instances:
        o = things {}
        expect (objtype (o)).to_be "Container"
        expect (o).to_copy (things)
        expect (getmetatable (o)).to_be (getmetatable (things))
    - it separates '_' prefixed fields:
        expect (Container {foo="bar", _baz="quux"}).
          to_equal (Container {foo="bar"})
    - it puts '_' prefixed fields in a new metatable:
        things = Container {foo="bar", _baz="quux"}
        expect (getmetatable (things)).not_to_be (getmetatable (Container))
        expect (getmetatable (things)._baz).to_be "quux"
    - it propagates '_type' field:
        things = Container {1}
        u, v = things {"u"}, things {"v"}
        expect (objtype (u)).to_be "Container"
        expect (objtype (v)).to_be (objtype (Container))
  - context with module functions:
    - before:
        Bag = require "std.prototype._base".Module {
          prototype = Container { _type = "Bag" },
          count = function (bag)
            local n = 0
            for _, m in pairs (bag) do n = n + m end
            return n
          end,
        }
    - it does not propagate module functions:
        things = Bag {}
        expect (things.count).to_be (nil)
    - it does not provide object methods: |
        things = Bag {}
        expect (things:count ()).to_raise.any_of {
          "attempt to call method 'count'",
          "attempt to call a nil value (method 'count'"
        }
    - it does retain module functions:
        things = Bag { apples = 1, oranges = 3 }
        expect (Bag.count (things)).to_be (4)
    - it does allow elements named after module functions:
        things = Bag { count = 1337 }
        expect (Bag.count (things)).to_be (1337)
    - it propagates '_type' field:
        things = Bag { bananas=0 }
        u, v = things { bananas=1 }, things { coconuts=0 }
        expect (objtype (u)).to_be "Bag"
        expect (objtype (v)).to_be (objtype (Bag.prototype))


- describe field access:
  - before:
      things = Container {"foo", "bar", baz="quux"}
  - context with bracket notation:
    - it provides access to existing contents:
        expect (things[1]).to_be "foo"
        expect (things["baz"]).to_be "quux"
    - it assigns new contents:
        things["new"] = "value"
        expect (things["new"]).to_be "value"
  - context with dot notation:
    - it provides access to existing contents:
        expect (things.baz).to_be "quux"
    - it assigns new contents:
        things.new = "value"
        expect (things.new).to_be "value"


- describe __pairs:
  - before:
      things = Container {"one", "two", three=3, four=4, "five", 6}
      iter = getmetatable (things).__pairs
  - it returns a function:
      expect (type (iter)).to_be "function"
  - it iterates all contents:
      r = {}
      for k, v in iter (things) do r[k] = v end
      expect (r).to_contain.a_permutation_of (copy (things))
  - it returns keys in order:
      keys = {}
      for k in iter (things) do keys[#keys + 1] = k end
      expect (keys).to_equal {1, 2, 3, 4, "four", "three"}


- describe __tostring:
  - before:
      things = Container {_type = "Derived", "one", "two", "three"}
  - it returns a string:
      expect (type (tostring (things))).to_be "string"
  - it contains the type:
      expect (tostring (Container {})).to_contain "Container"
      expect (tostring (things)).to_contain (objtype (things))
  - it contains the ordered array part elements:
      expect (tostring (things)).to_contain "one, two, three"
  - it contains the ordered dictionary part elements:
      expect (tostring (Container {one = true, two = true, three = true})).
        to_contain "one=true, three=true, two=true"
      expect (tostring (things {one = true, two = true, three = true})).
        to_contain "one=true, three=true, two=true"
  - it contains a ';' separator only when container has array and dictionary parts:
      expect (tostring (things)).not_to_contain ";"
      expect (tostring (Container {one = true, two = true, three = true})).
        not_to_contain ";"
      expect (tostring (things {one = true, two = true, three = true})).
        to_contain ";"
