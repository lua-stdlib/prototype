before:
  this_module  = "std.prototype.trie"

  trie = require (this_module)
  Trie = trie.prototype

specify std.prototype.trie:
- before:
    t = {foo="foo", fnord={branch={bar="bar", baz="baz"}}, quux="quux"}
    tr = Trie (t)

- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to="_G", by=this_module}).
          to_equal {}

  - context via the prototype module:
    - it does not touch the global table:
        expect (show_apis {added_to="_G", by="std.prototype"}).
          to_equal {}

- describe construction:
  - it constructs a new trie:
      tr = Trie {}
      expect (tr).not_to_be (Trie)
      expect (objtype (tr)).to_be "Trie"
  - it turns a table argument into a trie:
      expect (objtype (Trie (t))).to_be "Trie"
  - it does not turn table argument values into sub-Tries:
      expect (objtype (tr["fnord"])).to_be "table"
  - it understands branched nodes:
      expect (tr).to_equal (Trie (t))
      expect (tr[{"fnord"}]).to_equal (t.fnord)
      expect (tr[{"fnord", "branch", "bar"}]).to_equal (t.fnord.branch.bar)
  - it serves as a prototype for new instances:
      obj = tr {}
      expect (objtype (obj)).to_be "Trie"
      expect (obj).to_equal (tr)
      expect (getmetatable (obj)).to_be (getmetatable (tr))


- describe clone:
  - before:
      subject = { k1 = {"v1"}, k2 = {"v2"}, k3 = {"v3"} }
      f       = trie.clone
  - it does not just return the subject:
      expect (f (subject)).not_to_be (subject)
  - it does copy the subject:
      expect (f (subject)).to_equal (subject)
  - it makes a deep copy:
      expect (f (subject).k1).not_to_be (subject.k1)
  - it does not perturb the original subject:
      target = { k1 = subject.k1, k2 = subject.k2, k3 = subject.k3 }
      copy   = f (subject)
      expect (subject).to_equal (target)
      expect (subject).to_be (subject)
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f ()).to_raise ("table expected")
        expect (f "foo").to_raise ("table expected")
      end


- describe ileaves:
  - before:
      f = trie.ileaves
      l = {}
  - it iterates over array part of a table argument:
      for v in f {"first", "second", "3rd"} do l[1+#l]=v end
      expect (l).to_equal {"first", "second", "3rd"}
  - it iterates over array parts of nested table argument:
      for v in f {{"one", {"two"}, {{"three"}, "four"}}, "five"} do
        l[1+#l]=v
      end
      expect (l).to_equal {"one", "two", "three", "four", "five"}
  - it skips hash part of a table argument:
      for v in f {"first", "second"; third = "2rd"} do l[1+#l]=v end
      expect (l).to_equal {"first", "second"}
  - it skips hash parts of nested table argument:
      for v in f {{"one", {two=2}, {{"three"}, four=4}}, foo="bar", "five"} do
        l[1+#l]=v
      end
      expect (l).to_equal {"one", "three", "five"}
  - it works on tries too:
      for v in f (Trie {Trie {"one",
                                Trie {two=2},
                                Trie {Trie {"three"}, four=4}
                               },
                         foo="bar", "five"})
      do
        l[1+#l]=v
      end
      expect (l).to_equal {"one", "three", "five"}
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f ()).to_raise ("table expected")
        expect (f "string").to_raise ("table expected")
      end


- describe inodes:
  - before: |
      f = trie.inodes

      function traverse (subject)
        l = {}
        for ty, p, n in f (subject) do
           l[1+#l]={ty, trie.clone (p), n}
        end
        return l
      end
  - it iterates over array part of a table argument: |
      subject = {"first", "second", "3rd"}
      expect (traverse (subject)).
        to_equal {{"branch", {},  subject},                   -- {
                  {"leaf",   {1}, subject[1]},                --  first,
                  {"leaf",   {2}, subject[2]},                --  second,
                  {"leaf",   {3}, subject[3]},                --  3rd,
                  {"join",   {},  subject}}                   -- }
  - it iterates over array parts of nested table argument: |
      subject = {{"one", {"two"}, {{"three"}, "four"}}, "five"}
      expect (traverse (subject)).
        to_equal {{"branch", {},        subject},             -- {
                  {"branch", {1},       subject[1]},          --  {
                  {"leaf",   {1,1},     subject[1][1]},       --   one,
                  {"branch", {1,2},     subject[1][2]},       --   {
                  {"leaf",   {1,2,1},   subject[1][2][1]},    --    two,
                  {"join",   {1,2},     subject[1][2]},       --   },
                  {"branch", {1,3},     subject[1][3]},       --   {
                  {"branch", {1,3,1},   subject[1][3][1]},    --    {
                  {"leaf",   {1,3,1,1}, subject[1][3][1][1]}, --     three,
                  {"join",   {1,3,1},   subject[1][3][1]},    --    },
                  {"leaf",   {1,3,2},   subject[1][3][2]},    --    four,
                  {"join",   {1,3},     subject[1][3]},       --   },
                  {"join",   {1},       subject[1]},          --  },
                  {"leaf",   {2},       subject[2]},          --  five,
                  {"join",   {},        subject}}             -- }
  - it skips hash part of a table argument: |
      subject = {"first", "second"; third = "3rd"}
      expect (traverse (subject)).
        to_equal {{"branch", {},  subject},                   -- {
                  {"leaf",   {1}, subject[1]},                --  first,
                  {"leaf",   {2}, subject[2]},                --  second,
                  {"join",   {},  subject}}                   -- }
  - it skips hash parts of nested table argument: |
      subject = {{"one", {two=2}, {{"three"}, four=4}}, foo="bar", "five"}
      expect (traverse (subject)).
        to_equal {{"branch", {},        subject},             -- {
                  {"branch", {1},       subject[1]},          --  {
                  {"leaf",   {1,1},     subject[1][1]},       --   one,
                  {"branch", {1,2},     subject[1][2]},       --   {
                  {"join",   {1,2},     subject[1][2]},       --   },
                  {"branch", {1,3},     subject[1][3]},       --   {
                  {"branch", {1,3,1},   subject[1][3][1]},    --    {
                  {"leaf",   {1,3,1,1}, subject[1][3][1][1]}, --     three,
                  {"join",   {1,3,1},   subject[1][3][1]},    --    },
                  {"join",   {1,3},     subject[1][3]},       --   },
                  {"join",   {1},       subject[1]},          --  },
                  {"leaf",   {2},       subject[2]},          --  five,
                  {"join",   {},        subject}}             -- }
  - it works on tries too: |
      subject = Trie {Trie {"one",
                              Trie {two=2},
                              Trie {Trie {"three"}, four=4}},
                              foo="bar",
                              "five"}
      expect (traverse (subject)).
        to_equal {{"branch", {},        subject},             -- {
                  {"branch", {1},       subject[1]},          --  {
                  {"leaf",   {1,1},     subject[1][1]},       --   one,
                  {"branch", {1,2},     subject[1][2]},       --   {
                  {"join",   {1,2},     subject[1][2]},       --   },
                  {"branch", {1,3},     subject[1][3]},       --   {
                  {"branch", {1,3,1},   subject[1][3][1]},    --    {
                  {"leaf",   {1,3,1,1}, subject[1][3][1][1]}, --     three,
                  {"join",   {1,3,1},   subject[1][3][1]},    --    },
                  {"join",   {1,3},     subject[1][3]},       --   },
                  {"join",   {1},       subject[1]},          --  },
                  {"leaf",   {2},       subject[2]},          --  five,
                  {"join",   {},        subject}}             -- }
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f ()).to_raise ("table expected")
        expect (f "string").to_raise ("table expected")
      end


- describe leaves:
  - before:
      f = trie.leaves
      l = {}
  - it iterates over elements of a table argument:
      for v in f {"first", "second", "3rd"} do l[1+#l]=v end
      expect (l).to_equal {"first", "second", "3rd"}
  - it iterates over elements of a nested table argument:
      for v in f {{"one", {"two"}, {{"three"}, "four"}}, "five"} do
        l[1+#l]=v
      end
      expect (l).to_equal {"one", "two", "three", "four", "five"}
  - it includes the hash part of a table argument:
      for v in f {"first", "second"; third = "3rd"} do l[1+#l]=v end
      expect (l).to_equal {"first", "second", "3rd"}
  - it includes hash parts of a nested table argument:
      for v in f {{"one", {two=2}, {{"three"}, four=4}}, foo="bar", "five"} do
        l[1+#l]=v
      end
      expect (l).to_contain.
        a_permutation_of {"one", 2, "three", 4, "bar", "five"}
  - it works on tries too:
      for v in f (Trie {Trie {"one",
                                Trie {two=2},
                                Trie {Trie {"three"}, four=4}
                               },
                         foo="bar", "five"})
      do
        l[1+#l]=v
      end
      expect (l).to_contain.
        a_permutation_of {"one", 2, "three", 4, "bar", "five"}
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f ()).to_raise ("table expected")
        expect (f "string").to_raise ("table expected")
      end


- describe merge:
  - before: |
      f  = trie.merge

      -- Additional merge keys which are moderately unusual
      t1 = Trie { k1 = "v1", k2 = "if", k3 = Trie {"?"} }
      t2 = Trie { ["if"] = true, [{"?"}] = false, _ = "underscore", k3 = "v2" }

      target = trie.clone (t1)
      for ty, p, n in trie.nodes (t2) do
        if ty == "leaf" then target[p] = n end
      end
  - it does not create a whole new table:
      expect (f (t1, t2)).to_be (t1)
  - it does not change t1 when t2 is empty:
      expect (f (t1, Trie {})).to_be (t1)
  - it copies t2 when t1 is empty: |
      expect (f (Trie {}, t1)).to_copy (t1)
  - it merges keys from t2 into t1: |
      expect (f (t1, t2)).to_equal (target)
  - it gives precedence to values from t2:
      original = trie.clone (t1)
      m = f (t1, t2)      -- Merge is destructive, do it once only.
      expect (m.k3).to_be (t2.k3)
      expect (m.k3).not_to_be (original.k3)
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f (nil, {})).to_raise ("table expected")
        expect (f ({}, nil)).to_raise ("table expected")
      end


- describe nodes:
  - before:
      f = trie.nodes

      function traverse (subject)
        l = {}
        for ty, p, n in f (subject) do l[1+#l]={ty, trie.clone (p), n} end
        return l
      end
  - it iterates over the elements of a table argument: |
      subject = {"first", "second", "3rd"}
      expect (traverse (subject)).
        to_equal {{"branch", {},  subject},                   -- {
                  {"leaf",   {1}, subject[1]},                --  first,
                  {"leaf",   {2}, subject[2]},                --  second,
                  {"leaf",   {3}, subject[3]},                --  3rd,
                  {"join",   {},  subject}}                   -- }
  - it iterates over the elements of nested a table argument: |
      subject = {{"one", {"two"}, {{"three"}, "four"}}, "five"}
      expect (traverse (subject)).
        to_equal {{"branch", {},        subject},             -- {
                  {"branch", {1},       subject[1]},          --  {
                  {"leaf",   {1,1},     subject[1][1]},       --   one,
                  {"branch", {1,2},     subject[1][2]},       --   {
                  {"leaf",   {1,2,1},   subject[1][2][1]},    --    two,
                  {"join",   {1,2},     subject[1][2]},       --   },
                  {"branch", {1,3},     subject[1][3]},       --   {
                  {"branch", {1,3,1},   subject[1][3][1]},    --    {
                  {"leaf",   {1,3,1,1}, subject[1][3][1][1]}, --     three,
                  {"join",   {1,3,1},   subject[1][3][1]},    --    },
                  {"leaf",   {1,3,2},   subject[1][3][2]},    --    four,
                  {"join",   {1,3},     subject[1][3]},       --   },
                  {"join",   {1},       subject[1]},          --  },
                  {"leaf",   {2},       subject[2]},          --  five,
                  {"join",   {},        subject}}             -- }
  - it includes the hash part of a table argument: |
      -- like `pairs`, `nodes` can visit elements in any order, so we cannot
      -- guarantee the array part is always visited before the hash part, or
      -- even that the array elements are visited in order!
      subject = {"first", "second"; third = "3rd"}
      expect (traverse (subject)).to_contain.
        a_permutation_of {{"branch", {},        subject},             -- {
                          {"leaf",   {1},       subject[1]},          --  first,
                          {"leaf",   {2},       subject[2]},          --  second,
                          {"leaf",   {"third"}, subject["third"]},    --  3rd
                          {"join",   {},        subject}}             -- }
  - it includes hash parts of a nested table argument: |
      -- like `pairs`, `nodes` can visit elements in any order, so we cannot
      -- guarantee the array part is always visited before the hash part, or
      -- even that the array elements are visited in order!
      subject = {{"one", {two=2}, {{"three"}, four=4}}, foo="bar", "five"}
      expect (traverse (subject)).to_contain.
        a_permutation_of {{"branch", {},           subject},               -- {
                          {"branch", {1},          subject[1]},            --  {
                          {"leaf",   {1,1},        subject[1][1]},         --   one,
                          {"branch", {1,2},        subject[1][2]},         --   {
                          {"leaf",   {1,2,"two"},  subject[1][2]["two"]},  --     2,
                          {"join",   {1,2},        subject[1][2]},         --   },
                          {"branch", {1,3},        subject[1][3]},         --   {
                          {"branch", {1,3,1},      subject[1][3][1]},      --    {
                          {"leaf",   {1,3,1,1},    subject[1][3][1][1]},   --     three,
                          {"join",   {1,3,1},      subject[1][3][1]},      --    },
                          {"leaf",   {1,3,"four"}, subject[1][3]["four"]}, --    4,
                          {"join",   {1,3},        subject[1][3]},         --   },
                          {"join",   {1},          subject[1]},            --  },
                          {"leaf",   {2},          subject[2]},            --  five,
                          {"leaf",   {"foo"},      subject["foo"]},        --  bar,
                          {"join",   {},           subject}}               -- }
  - it works on tries too: |
      -- like `pairs`, `nodes` can visit elements in any order, so we cannot
      -- guarantee the array part is always visited before the hash part, or
      -- even that the array elements are visited in order!
      subject = Trie {Trie {"one",
                              Trie {two=2},
                              Trie {Trie {"three"}, four=4}},
                              foo="bar",
                              "five"}
      expect (traverse (subject)).to_contain.
        a_permutation_of {{"branch", {},           subject},               -- {
                          {"branch", {1},          subject[1]},            --  {
                          {"leaf",   {1,1},        subject[1][1]},         --   one,
                          {"branch", {1,2},        subject[1][2]},         --   {
                          {"leaf",   {1,2,"two"},  subject[1][2]["two"]},  --     2,
                          {"join",   {1,2},        subject[1][2]},         --   },
                          {"branch", {1,3},        subject[1][3]},         --   {
                          {"branch", {1,3,1},      subject[1][3][1]},      --    {
                          {"leaf",   {1,3,1,1},    subject[1][3][1][1]},   --     three,
                          {"join",   {1,3,1},      subject[1][3][1]},      --    },
                          {"leaf",   {1,3,"four"}, subject[1][3]["four"]}, --    4,
                          {"join",   {1,3},        subject[1][3]},         --   },
                          {"join",   {1},          subject[1]},            --  },
                          {"leaf",   {2},          subject[2]},            --  five,
                          {"leaf",   {"foo"},      subject["foo"]},        --  bar,
                          {"join",   {},           subject}}               -- }
  - it generates path key-lists that are valid __index arguments: |
      subject = Trie {"first", Trie {"second"}, "3rd"}
      expect (traverse (subject)).
        to_equal {{"branch", {},    subject[{}]},    -- {
                  {"leaf",   {1},   subject[{1}]},   --  first,
                  {"branch", {2},   subject[{2}]},   --  {
                  {"leaf",   {2,1}, subject[{2,1}]}, --   second
                  {"join",   {2},   subject[{2}]},   --  }
                  {"leaf",   {3},   subject[{3}]},   --  3rd,
                  {"join",   {},    subject[{}]}}    -- }
  - it diagnoses non-table arguments:
      if have_typecheck then
        expect (f ()).to_raise ("table expected")
        expect (f "string").to_raise ("table expected")
      end


- describe __index:
  - it returns nil for a missing key:
      expect (tr["no such key"]).to_be (nil)
  - it returns nil for missing single element key lists:
      expect (tr[{"no such key"}]).to_be (nil)
  - it returns nil for missing multi-element key lists:
      expect (tr[{"fnord", "foo"}]).to_be (nil)
      expect (tr[{"no", "such", "key"}]).to_be (nil)
  - it returns a value for the given key:
      expect (tr["foo"]).to_be "foo"
      expect (tr["quux"]).to_be "quux"
  - it returns trie root for empty key list:
      expect (tr[{}]).to_be (tr)
  - it returns values for single element key lists:
      expect (tr[{"foo"}]).to_be "foo"
      expect (tr[{"quux"}]).to_be "quux"
  - it returns values for multi-element key lists:
      expect (tr[{"fnord", "branch", "bar"}]).to_be "bar"
      expect (tr[{"fnord", "branch", "baz"}]).to_be "baz"


- describe __newindex:
  - before:
      tr = Trie {}
  - it stores values for simple keys:
      tr["foo"] = "foo"
      expect (tr).to_equal (Trie {foo="foo"})
  - it stores values for single element key lists:
      tr[{"foo"}] = "foo"
      expect (tr).to_equal (Trie {foo="foo"})
  - it stores values for multi-element key lists:
      tr[{"foo", "bar"}] = "baz"
      expect (tr).to_equal (Trie {foo=Trie {bar="baz"}})
  - it separates branches for diverging key lists:
      tr[{"foo", "branch", "bar"}] = "leaf1"
      tr[{"foo", "branch", "baz"}] = "leaf2"
      expect (tr).to_equal (Trie {foo=Trie {branch=Trie {bar="leaf1", baz="leaf2"}}})


- describe __tostring:
  - it returns a string:
      expect (objtype (tostring (tr))).to_be "string"
  - it shows the type name:
      expect (tostring (tr)).to_contain "Trie"
  - it shows the contents in order: |
      tr = Trie {foo   = "foo",
                 fnord = Trie {branch = Trie {bar="bar", baz="baz"}},
                 quux  = "quux"}
      expect (tostring (tr)).
        to_contain 'fnord=Trie {branch=Trie {bar=bar, baz=baz}}, foo=foo, quux=quux'
