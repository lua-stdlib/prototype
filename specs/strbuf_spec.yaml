before:
  this_module = "std.prototype.strbuf"

  StrBuf = require (this_module).prototype
  b      = StrBuf {"foo", "bar"}


specify std.prototype.strbuf:
- describe require:
  - it does not perturb the global namespace:
      expect (show_apis {added_to="_G", by=this_module}).
        to_equal {}
  - context via the prototype module:
    - it does not perturb the global namespace:
        expect (show_apis {added_to="_G", by="std.prototype"}).to_equal {}


- describe construction:
  - context from StrBuf clone method:
    - it constructs a new strbuf:
        b = StrBuf:clone {}
        expect (b).not_to_be (StrBuf)
        expect (objtype (b)).to_be "StrBuf"
    - it reuses the StrBuf metatable:
        a, b = StrBuf:clone {"a"}, StrBuf:clone {"b"}
        expect (getmetatable (a)).to_be (getmetatable (b))
    - it initialises strbuf with constructor parameters:
        a = StrBuf:clone {"foo", "bar"}
        expect (a).to_equal (b)
    - it serves as a prototype for new instances:
        obj = b:clone {}
        expect (objtype (obj)).to_be "StrBuf"
        expect (obj).to_equal (b)
        expect (getmetatable (obj)).to_be (getmetatable (b))

  # StrBuf {args} is just syntactic sugar for StrBuf:clone {args}
  - context from StrBuf object prototype:
    - it constructs a new strbuf:
        b = StrBuf {}
        expect (b).not_to_be (StrBuf)
        expect (objtype (b)).to_be "StrBuf"
    - it reuses the StrBuf metatable:
        a, b = StrBuf {"a"}, StrBuf {"b"}
        expect (getmetatable (a)).to_be (getmetatable (b))
    - it initialises strbuf with constructor parameters:
        a = StrBuf:clone {"foo", "bar"}
        expect (a).to_equal (b)
    - it serves as a prototype for new instances:
        obj = b {}
        expect (objtype (obj)).to_be "StrBuf"
        expect (obj).to_equal (b)
        expect (getmetatable (obj)).to_be (getmetatable (b))


- describe tostring:
  - it returns buffered string:
      expect (tostring (b)).to_be "foobar"


- describe concat:
  - before:
      a = StrBuf {"foo", "bar"}
      b = StrBuf {"baz", "quux"}

  - context as a module function:
    - it appends a string:
        a = StrBuf.concat (a, "baz")
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring (a)).to_be "foobarbaz"
    - it appends a StrBuf:
        a = StrBuf.concat (a, b)
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring (a)).to_be "foobarbazquux"
  - context as an object method:
    - it appends a string:
        a = a:concat "baz"
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring(a)).to_be "foobarbaz"
    - it appends a StrBuf:
        a = a:concat (b)
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring (a)).to_be "foobarbazquux"
  - context as a metamethod:
    - it appends a string:
        a = a .. "baz"
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring (a)).to_be "foobarbaz"
    - it appends a StrBuf:
        a = a .. b
        expect (objtype (a)).to_be "StrBuf"
        expect (tostring (a)).to_be "foobarbazquux"
  - it stringifies lazily:
      a = StrBuf {1}
      b = StrBuf {a, "five"}
      a = a:concat (2)
      expect (tostring (b)).to_be "12five"
      b = StrBuf {tostring (a), "five"}
      a = a:concat (3)
      expect (tostring (b)).to_be "12five"
  - it can be non-destructive:
      a = StrBuf {1}
      b = a {} .. 2
      expect (tostring (a)).to_be "1"
